#version 420

out vec4 FragColor;

in vec2 TexCoord0;  // tut 16
in vec3 Normal0;    // tut 18
in vec3 WorldPos0;  // tut 19 (specular)
in vec3 Tangent0;

uniform vec3  EyeWorldPos;

struct BaseLight
{
    vec3  Color;
    float AmbientIntensity;
    float DiffuseIntensity;
};

struct DirectionalLight
{
    BaseLight Base;
    vec3      Direction;
};

struct MaterialProp
{
    float SpecularIntensity;
    float SpecularPower;
};

uniform DirectionalLight gDirectionalLight;
uniform MaterialProp     gMatProp;
layout(binding=0) uniform sampler2D gSampler;
layout(binding=1) uniform sampler2D gNormalSampler;

vec4 CalcDirectionalLight(DirectionalLight Light, vec3 inNormal)
{
    vec4 AmbientColor   = vec4(Light.Base.Color, 1.0f) * Light.Base.AmbientIntensity;
    float DiffuseFactor = dot(inNormal, -Light.Direction);

    vec4 DiffuseColor   = vec4(0, 0, 0, 0);
    vec4 SpecularColor  = vec4(0, 0, 0, 0);

    if (DiffuseFactor > 0)
    {
        DiffuseColor         = vec4(Light.Base.Color, 1.0f) * Light.Base.DiffuseIntensity * DiffuseFactor;
        vec3 VertexToEye     = normalize(EyeWorldPos - WorldPos0);
        vec3 LightReflect    = normalize(reflect(Light.Direction, inNormal));
        float SpecularFactor = dot(VertexToEye, LightReflect);
        SpecularFactor       = pow(SpecularFactor, gMatProp.SpecularPower);
        if (SpecularFactor > 0)
        {
            SpecularColor = vec4(Light.Base.Color, 1.0f) * gMatProp.SpecularIntensity * SpecularFactor;
        }
    }
    return (AmbientColor + DiffuseColor + SpecularColor);
}

vec3 CalcBumpedNormal()
{
    vec3 Normal = normalize(Normal0);
    vec3 Tangent = normalize(Tangent0);
    Tangent = normalize(Tangent - dot(Tangent, Normal) * Normal); // Gramm-Schmidt process
    vec3 Bitangent = cross(Tangent, Normal);
    vec3 BumpMapNormal = texture(gNormalSampler, TexCoord0).xyz;
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0); // range [0 1] -> [-1 1]
    vec3 NewNormal;
    mat3 TBN = mat3(Tangent, Bitangent, Normal);
    NewNormal = TBN * BumpMapNormal; // transform normal from tangent space to world space
    NewNormal = normalize(NewNormal);
    return NewNormal;
}

void main()
{
    //vec3 Normal = normalize(Normal0);
    vec3 Normal = CalcBumpedNormal();
    vec4 TotalLight = CalcDirectionalLight(gDirectionalLight, Normal);
//    FragColor = vec4 (1.0f, 0.0f, 0.0f, 1.0f);
    FragColor = texture2D(gSampler, TexCoord0.xy) * TotalLight;
//    FragColor = texture2D(gSampler, TexCoord0.xy) * vec4(1.0, 0.0, 0.0, 1.0f);
}
