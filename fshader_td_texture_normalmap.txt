// based on Tom Dalling tuto: http://www.tomdalling.com/blog/modern-opengl/06-diffuse-point-lighting/

#version 420

out vec4 finalColor;

in vec3 fragVert;
in vec2 fragTexCoord;
in vec3 fragNormal;
in vec3 fragTangent;

struct BaseLight
{
    vec3  Color;
    float AmbientIntensity;
    float DiffuseIntensity;
};

struct DirectionalLight
{
    BaseLight Base;
    vec3      Position;
};

uniform mat4 model;
uniform DirectionalLight gDirectionalLight;

layout(binding=0) uniform sampler2D gSampler;
layout(binding=1) uniform sampler2D gNormalSampler;

vec4 CalcDirectionalLight(DirectionalLight Light, vec3 inNormal)
{
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vec3 normal = normalize(normalMatrix  * inNormal);

    vec3 fragPosition = vec3(model  * vec4(fragVert, 1));
    vec3 surfaceToLight = Light.Position - fragPosition;

    //float brightness = dot(normal, surfaceToLight) / (length(surfaceToLight) * length(normal));
    float brightness = dot(normal, surfaceToLight);
    brightness = clamp(brightness, 0, 1);

    vec4 surfaceColor = texture(gSampler, fragTexCoord);

    return (vec4(brightness * Light.Base.Color * surfaceColor.rgb, surfaceColor.a));
}

vec3 CalcBumpedNormal()
{
/*
    vec3 BumpMapNormal = texture(gNormalSampler, TexCoord0).xyz;
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0); // range [0 1] -> [-1 1]
    vec3 NewNormal = normalize(TBN * BumpMapNormal); // transform normal from tangent space to world space
*/

/*
    vec3 BumpMapNormal = texture(gNormalSampler, TexCoord0).xyz;
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0); // range [0 1] -> [-1 1]
    vec3 NewNormal = normalize(BumpMapNormal); // transform normal from tangent space to world space
*/
    vec3 Normal    = normalize(fragNormal);
    vec3 Tangent   = normalize(fragTangent);
    Tangent        = normalize(Tangent - dot(Tangent, fragNormal) * fragNormal);
    vec3 Bitangent = cross(Tangent, Normal);

    vec3 BumpMapNormal = texture(gNormalSampler, fragTexCoord).xyz;
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0);
    vec3 NewNormal;
    mat3 TBN = mat3(Tangent, Bitangent, Normal);
    NewNormal = TBN * BumpMapNormal;
    NewNormal = normalize(NewNormal);

    return NewNormal;
}

void main()
{
    vec3 NewNormal = CalcBumpedNormal();
    finalColor = CalcDirectionalLight(gDirectionalLight, NewNormal);
//    finalColor = vec4 (NewNormal, 1.0);
//      FragColor = texture(gNormalSampler, TexCoord0);
//      mat3 normalMatrix = transpose(inverse(mat3(gWorld)));
//      FragColor = vec4 (normalize(normalMatrix * Normal0), 1.0);
//    FragColor = vec4 (1.0f, 0.0f, 0.0f, 1.0f);
//    FragColor = texture2D(gSampler, TexCoord0.xy) * vec4(1.0, 0.0, 0.0, 1.0f);
}
