#version 330

out vec4 FragColor;

in vec2 TexCoord0;  // tut 16
in vec3 Normal0;    // tut 18
in vec3 WorldPos0;  // tut 19 (specular)

uniform vec3  EyeWorldPos;

struct BaseLight
{
    vec3  Color;
    float AmbientIntensity;
    float DiffuseIntensity;
};

struct DirectionalLight
{
    BaseLight Base;
    vec3      Direction;
};

struct MaterialProp
{
    float SpecularIntensity;
    float SpecularPower;
};

uniform DirectionalLight gDirectionalLight;
uniform MaterialProp     gMatProp;
uniform sampler2D        gSampler;

vec4 CalcDirectionalLight(DirectionalLight Light, vec3 Normal)
{
    vec4 AmbientColor   = vec4(Light.Base.Color, 1.0f) * Light.Base.AmbientIntensity;
    float DiffuseFactor = dot(Normal, -Light.Direction);

    vec4 DiffuseColor   = vec4(0, 0, 0, 0);
    vec4 SpecularColor  = vec4(0, 0, 0, 0);

    if (DiffuseFactor > 0)
    {
        DiffuseColor         = vec4(Light.Base.Color, 1.0f) * Light.Base.DiffuseIntensity * DiffuseFactor;
        vec3 VertexToEye     = normalize(EyeWorldPos - WorldPos0);
        vec3 LightReflect    = normalize(reflect(Light.Direction, Normal));
        float SpecularFactor = dot(VertexToEye, LightReflect);
        SpecularFactor       = pow(SpecularFactor, gMatProp.SpecularPower);
        if (SpecularFactor > 0)
        {
            SpecularColor = vec4(Light.Base.Color, 1.0f) * gMatProp.SpecularIntensity * SpecularFactor;
        }
    }
    return (AmbientColor + DiffuseColor + SpecularColor);
}


void main()
{
    vec3 Normal = normalize(Normal0);
    vec4 TotalLight = CalcDirectionalLight(gDirectionalLight, Normal);
    FragColor = vec4 (1.0f, 0.0f, 0.0f, 1.0f);
//    FragColor = texture2D(gSampler, TexCoord0.xy) * TotalLight;
//    FragColor = texture2D(gSampler, TexCoord0.xy) * vec4(1.0, 0.0, 0.0, 1.0f);
}
