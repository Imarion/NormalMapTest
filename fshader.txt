#version 330

out vec4 FragColor;

in vec2 TexCoord0;  // tut 16
in vec3 Normal0;    // tut 18
in vec3 WorldPos0;  // tut 19 (specular)

uniform vec3  EyeWorldPos;

struct MaterialProp
{
    float SpecularIntensity;
    float SpecularPower;
};

struct BaseLight
{
    vec3  Color;
    float AmbientIntensity;
    float DiffuseIntensity;
};

struct DirectionalLight
{
    BaseLight Base;
    vec3      Direction;
};

struct Attenuation
{
    float Constant;
    float Linear;
    float Exp;
};

struct PointLight
{
    BaseLight   Base;
    vec3        Position;
    Attenuation Atten;
};

struct SpotLight
{
    PointLight Base;
    vec3 Direction;
    float Cutoff;
};

uniform DirectionalLight gDirectionalLight;
uniform MaterialProp     gMatProp;
uniform sampler2D        gSampler;
uniform PointLight       gPointLight;
uniform SpotLight        gSpotLight;

vec4 CalcDirectionalLight(BaseLight Light, vec3 LightDirection, vec3 Normal)
{
    vec4 AmbientColor   = vec4(Light.Color, 1.0f) * Light.AmbientIntensity;
    float DiffuseFactor = dot(Normal, -LightDirection);

    vec4 DiffuseColor   = vec4(0, 0, 0, 0);
    vec4 SpecularColor  = vec4(0, 0, 0, 0);

    if (DiffuseFactor > 0)
    {
        DiffuseColor         = vec4(Light.Color, 1.0f) * Light.DiffuseIntensity * DiffuseFactor;
        vec3 VertexToEye     = normalize(EyeWorldPos - WorldPos0);
        vec3 LightReflect    = normalize(reflect(LightDirection, Normal));
        float SpecularFactor = dot(VertexToEye, LightReflect);
        SpecularFactor       = pow(SpecularFactor, gMatProp.SpecularPower);
        if (SpecularFactor > 0)
        {
            SpecularColor = vec4(Light.Color, 1.0f) * gMatProp.SpecularIntensity * SpecularFactor;
        }
    }
    return (AmbientColor + DiffuseColor + SpecularColor);
}

vec4 CalcPointLight(PointLight l, vec3 Normal)
{
    vec3 LightDirection = WorldPos0 - l.Position;
    float Distance = length(LightDirection);
    LightDirection = normalize(LightDirection);

    vec4 Color = CalcDirectionalLight(l.Base, LightDirection, Normal);
    float Attenuation = l.Atten.Constant +
                        l.Atten.Linear * Distance +
                        l.Atten.Exp * Distance * Distance;

    return Color / Attenuation;
}

vec4 CalcSpotLight(SpotLight l, vec3 Normal)
{
    vec3 LightToPixel = normalize(WorldPos0 - l.Base.Position);
    float SpotFactor  = dot(LightToPixel, l.Direction);
    if (SpotFactor > l.Cutoff) {
        vec4 Color = CalcPointLight(l.Base, Normal);
        return Color * (1.0 - (1.0 - SpotFactor) * 1.0/(1.0 - l.Cutoff));
    }
    else {
        return vec4(0,0,0,0);
    }
}

void main()
{
    vec3 Normal = normalize(Normal0);
//    vec4 TotalLight = CalcDirectionalLight(gDirectionalLight.Base, gDirectionalLight.Direction, Normal);
//    TotalLight     += CalcPointLight(gPointLight, Normal);
    vec4 TotalLight     = CalcSpotLight(gSpotLight, Normal);
//    vec4 TotalLight = CalcPointLight(gPointLight, Normal);
    FragColor = texture2D(gSampler, TexCoord0.xy) * TotalLight;
//    FragColor = texture2D(gSampler, TexCoord0.xy) * vec4(1.0, 0.0, 0.0, 1.0f);
}
